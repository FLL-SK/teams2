# import * from "./shared/scalars.graphql"
# import * from "./shared/types.graphql"

# import * from "./team.graphql"
# import * from "./user.graphql"
# import * from "./event.graphql"
# import * from "./program.graphql"
# import * from "./invoice-item.graphql"
# import * from "./file.graphql"

type Registration implements INode {
  id: ID!
  programId: ID!
  eventId: ID!
  teamId: ID!

  createdOn: DateTime!
  createdBy: ID!
  confirmedOn: DateTime
  confirmedBy: ID
  canceledOn: DateTime
  canceledBy: ID

  billTo: Address!
  shipTo: Address!

  invoiceItems: [InvoiceItem!]!

  invoiceIssuedOn: DateTime
  invoiceIssuedBy: ID!
  invoiceSentOn: DateTime
  invoiceNote: String
  invoiceRef: String

  paidOn: DateTime

  shipmentGroup: String
  shippedOn: DateTime

  girlCount: Int!
  boyCount: Int!
  coachCount: Int!
  sizeConfirmedOn: DateTime

  event: Event!
  team: Team!
  program: Program!
  createdByUser: User!
  invoiceIssuedByUser: User!
}

input RegistrationInput {
  billTo: AddressInput
  shipTo: AddressInput
  invoiceNote: String
}

type RegistrationPayload {
  registration: Registration
  errors: [MutationError!]
}

input TeamSizeInput {
  girlCount: Int!
  boyCount: Int!
  coachCount: Int!
}

type RegisteredTeamPayload {
  id: ID!
  teamId: ID!
  registeredOn: DateTime!
  confirmedOn: DateTime
  paidOn: DateTime
  name: String!
  address: Address!
  girlCount: Int!
  boyCount: Int!
  coachCount: Int!
  sizeConfirmedOn: DateTime
  coaches: [User!]
}

type RegisterTeamPayload {
  team: Team
  event: Event
  error: MutationError
}

type UnregisterTeamPayload {
  team: Team
  event: Event
  error: MutationError
}

input RegistrationFilter {
  programId: ID
  onlyUnconfirmed: Boolean
  onlyUnpaid: Boolean
  onlyNotInvoiced: Boolean
  onlyNotShipped: Boolean
}

extend type Query {
  getRegistration(id: ID!): Registration
  getRegistrationsCount(filter: RegistrationFilter): Int!
  getProgramRegistrations(programId: ID!): [Registration!]!
  getEventRegistrations(eventId: ID!): [Registration!]!
  getRegistrationFiles(id: ID!): [File!]!
  getRegisteredTeams(eventId: ID!, includeCoaches: Boolean): [RegisteredTeamPayload!]!
}

extend type Mutation {
  registrationSetInvoiced(id: ID!, date: DateTime, ref: String): Registration
  registrationClearInvoiced(id: ID!): Registration

  registrationSetPaid(id: ID!, date: DateTime): Registration
  registrationClearPaid(id: ID!): Registration

  registrationSetConfirmed(id: ID!, date: DateTime): Registration
  registrationClearConfirmed(id: ID!): Registration

  registrationSetShipmentGroup(id: ID!, group: String): Registration

  registrationSetShipped(id: ID!, date: DateTime): Registration
  registrationClearShipped(id: ID!): Registration

  registrationSetTeamSize(id: ID!, input: TeamSizeInput!): Registration

  registrationSetTeamSizeConfirmed(id: ID!, date: DateTime): Registration
  registrationClearTeamSizeConfirmed(id: ID!): Registration

  createRegistration(eventId: ID!, teamId: ID!): RegistrationPayload!
  updateRegistration(id: ID!, input: RegistrationInput!): Registration
  cancelRegistration(id: ID!): RegistrationPayload!
  changeRegisteredEvent(registrationId: ID!, newEventId: ID!): RegistrationPayload!

  createRegistrationInvoice(id: ID!): RegistrationPayload!
  emailRegistrationInvoice(id: ID!): RegistrationPayload!
}
