# import * from "./shared/scalars.graphql"
# import * from "./shared/types.graphql"

# import * from "./team.graphql"
# import * from "./user.graphql"
# import * from "./event.graphql"
# import * from "./invoice.graphql"
# import * from "./registration.graphql"

type Program implements INode {
  id: ID!
  name: String!
  description: String
  logoUrl: String
  conditions: String
  startDate: DateTime!
  endDate: DateTime!

  managersIds: [ID!]!

  invoiceItems: [InvoiceItem!]!

  deletedOn: DateTime
  deletedBy: ID

  events: [Event!]!
  managers: [User!]!
  registrations: [Registration!]!
}

input CreateProgramInput {
  name: String!
  description: String
  conditions: String
  startDate: DateTime!
  endDate: DateTime!
}

type CreateProgramPayload implements IMutationPayload {
  program: Program
  errors: [ValidationError!]
}

input UpdateProgramInput {
  name: String
  description: String
  conditions: String
  startDate: DateTime
  endDate: DateTime
}

type UpdateProgramPayload {
  program: Program
  errors: [ValidationError!]
}

input ProgramFilterInput {
  isActive: Boolean
}

extend type Query {
  getProgram(id: ID!): Program!
  getPrograms(filter: ProgramFilterInput): [Program!]!
}

extend type Mutation {
  createProgram(input: CreateProgramInput!): CreateProgramPayload!
  updateProgram(id: ID!, input: UpdateProgramInput!): UpdateProgramPayload!
  deleteProgram(id: ID!): Program

  addProgramManager(programId: ID!, userId: ID!): Program!
  removeProgramManager(programId: ID!, userId: ID!): Program!

  createProgramInvoiceItem(programId: ID!, item: InvoiceItemInput!): InvoiceItem!
  deleteProgramInvoiceItem(programId: ID!, itemId: ID!): InvoiceItem!
  updateProgramInvoiceItem(programId: ID!, itemId: ID!, item: InvoiceItemInput!): InvoiceItem!
}
