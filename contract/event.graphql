# import * from "./shared/scalars.graphql"
# import * from "./shared/types.graphql"

# import * from "./team.graphql"
# import * from "./user.graphql"
# import * from "./program.graphql"
# import * from "./invoice-item.graphql"
# import * from "./registration.graphql"

type Event implements INode {
  id: ID!
  name: String!
  programId: ID!

  date: DateTime
  registrationEnd: DateTime
  conditions: String
  ownFeesAllowed: Boolean
  maxTeams: Int

  managersIds: [ID!]!

  invoiceItems: [InvoiceItem!]!

  deletedOn: DateTime
  deletedBy: ID

  registrationsCount: Int!
  managers: [User!]!
  program: Program!
}

input CreateEventInput {
  programId: ID!
  name: String!
  date: DateTime
  registrationEnd: DateTime
  conditions: String
  ownFeesAllowed: Boolean
  maxTeams: Int
}

type CreateEventPayload implements IMutationPayload {
  event: Event
  errors: [MutationError!]
}

input UpdateEventInput {
  name: String
  date: DateTime
  registrationEnd: DateTime
  conditions: String
  ownFeesAllowed: Boolean
  maxTeams: Int
}

type UpdateEventPayload implements IMutationPayload {
  event: Event
  errors: [MutationError!]
}

input EventFilterInput {
  isActive: Boolean
  programId: ID
}

extend type Query {
  getEvent(id: ID!): Event!
  getEvents(filter: EventFilterInput): [Event!]!
}

extend type Mutation {
  createEvent(input: CreateEventInput!): CreateEventPayload!
  updateEvent(id: ID!, input: UpdateEventInput!): UpdateEventPayload!
  deleteEvent(id: ID!): Event
  undeleteEvent(id: ID!): Event

  addEventManager(eventId: ID!, userId: ID!): Event
  removeEventManager(eventId: ID!, userId: ID!): Event
}
