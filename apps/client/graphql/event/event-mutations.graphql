mutation deleteEvent($id: ID!) {
  deleteEvent(id: $id) {
    ...EventFragment
  }
}

mutation createEvent($input: CreateEventInput!) {
  createEvent(input: $input) {
    event {
      ...EventFragment
    }
    errors {
      ...ValidationErrorFragment
    }
  }
}

mutation updateEvent($id: ID!, $input: UpdateEventInput!) {
  updateEvent(id: $id, input: $input) {
    event {
      ...EventFragment
    }
    errors {
      ...ValidationErrorFragment
    }
  }
}

mutation addEventManager($eventId: ID!, $userId: ID!) {
  addEventManager(eventId: $eventId, userId: $userId) {
    ...EventFragment
  }
}

mutation removeEventManager($eventId: ID!, $userId: ID!) {
  removeEventManager(eventId: $eventId, userId: $userId) {
    ...EventFragment
  }
}

mutation registerTeamForEvent($eventId: ID!, $teamId: ID!) {
  registerTeamForEvent(eventId: $eventId, teamId: $teamId) {
    event {
      ...EventFragment
    }
    team {
      ...TeamFragment
    }
  }
}

mutation unregisterTeamFromEvent($eventId: ID!, $teamId: ID!) {
  unregisterTeamFromEvent(eventId: $eventId, teamId: $teamId) {
    event {
      ...EventFragment
    }
    team {
      ...TeamFragment
    }
  }
}

mutation createEventInvoiceItem($eventId: ID!, $item: InvoiceItemInput!) {
  createEventInvoiceItem(eventId: $eventId, item: $item) {
    ...InvoiceItemFragment
  }
}

mutation updateEventInvoiceItem($eventId: ID!, $itemId: ID!, $item: InvoiceItemInput!) {
  updateEventInvoiceItem(eventId: $eventId, itemId: $itemId, item: $item) {
    ...InvoiceItemFragment
  }
}

mutation deleteEventInvoiceItem($eventId: ID!, $itemId: ID!) {
  deleteEventInvoiceItem(eventId: $eventId, itemId: $itemId) {
    ...InvoiceItemFragment
  }
}
